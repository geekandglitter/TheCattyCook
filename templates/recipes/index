{% extends "base" %}

{% block content %}
<div style=width:600px;>

<p>

</p>
<br>
<h1> For Everyone </h1>
 <span style="font-size:15px">
 <ol>
    <li><b><a href="/modelsearch">Search for a post or topic</b></a>	 
	<br><small>Type in any word or phrase, separated by commas. Shows results in order of relevance, which is based on number of criteria met. You can try typing in symptoms or remedies
	</small></li>
	<li><b><a href="/getchron">View all my posts chronologically  </a></b><br><small>My most recent posts are first</small> </li>

    <li><a href="/get"><b>See all posts alphabetically </b>  </a><br><small>Uses Google Blogger API and requests to get 
	the feed, one year at a time to prevent a timeout, then loads the json alphabetically. 
	Does not store them in a model.</small>  </li>

	 



</ol>   
</span>   
<br><br>
<h1>For Developers</h1>
<h2>And don't worry if you break something</h2>
<span style="font-size:10px">
<ol> 			
	  

	<li><a href="/getchron">View all blog posts chronologically  </a><br><small>Uses Google Blogger API and requests
	to get the feed, one year at a time to prevent a timeout, then loads the json chronologically.</small> </li>

	<li><a href="/scrape">View Posts scraped from the home page  </a><br><small>Uses requests and beautifulSoup to scrape
	posts only from the home page. The results are limited.</small></li>     

	<! --  The next two views are attempting to be the same. The first is a functional view; the second a class-based view -->
    <li><a href="/retrieve-recipes">Retrieve the URL's from the model</a><br><small>Uses a functional view.</small></li>   
	<li><a href="retrieve-recipes-classbased">Retrieve the URL's from the model</a> <br><small>Uses a class based view. This 
	view has no path, so it's "retrieve-recipes-classbased". Note that class-based is faster than functional.
	</small></li>    

  <hr>
  <hr>

	<li><a href="/get-and-store">Find all Posts from the blog, store them in the database, and then display them in alphabetical order </a></b><br><small>Uses requests to get
	all the post urls from Google Blogger API,  then store them each in one record in a model
	(a mysql or postgres database).</small></li>

	<li><a href = "/scrapecontents">Scrape all post contents and stuff them in a model.</a><b> Do not run this until you have run "Find all Posts" above</b><small>
	<br>This is a simple crawler that crawls the entire blog periodically. It then stores the results in the
	model. The new faster search at the top of this page searches the model rather than the actual pages on my blog. This 
	is called an index search, and it's a lot faster than a rifle search. An index search is how google works. This view
	 relies on the posts retrieved in the above view.</small></li>   
   <hr> 
   <hr>

    <li><a href="/suggestions">Select ingredients from suggestions</a><br>
	(This is a slow rifle search for demo purpose only.)<br>
	<small>Shows all database keywords with checkboxes. Results are ordered by relevance 
	(number of search criteria met). </small> </li>
 		
 
</ol>
</span> 
<br><br>
<h1>Explanation</h1>
 <p>
Use this interface to my Long Covid Mind blog. The links in bold will be most useful to you.
Find what you want, click through, and you can print the posts on your printer if you like.
 </p>

<p><b>For Developers </b><br>
 
I wrote this Python/Django web app to experiment with scraping, RSS Feeds and API's. Those are three different
ways to get content from a website or blog. Its concept is that it serves as a front end to allow various ways to 
find posts in my blogspot blog, <a href="https://longcovidmind.blogspot.com/">Long Covid Mind</a>. Each link here
represents a Django view.  </p>

</div>
{% endblock content %}




